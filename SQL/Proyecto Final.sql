set serveroutput on;
--Cambia la sesion al pluggable DB. Este script debe de ser corrido con user que tenga SYSDBA grants
ALTER SESSION SET container = orclpdb;
ALTER DATABASE OPEN;
--ALTER SESSION SET CONTAINER=cdb$root;
set serveroutput on;

--Esto elimina a los usuarios NEGOCIO, WEB_ACCESS, dumy y todos sus objetos. Permite recrear todos los objetos facilmente.
DECLARE
    v_count NUMBER;
BEGIN
    SELECT
        COUNT(1)
    INTO v_count
    FROM
        DBA_USERS
    WHERE
        username = upper('NEGOCIO');
    IF v_count != 0 THEN
        EXECUTE IMMEDIATE ('DROP USER NEGOCIO CASCADE' );
    END IF;
    v_count := 0;
    
    SELECT
        COUNT(1)
    INTO v_count
    FROM
        DBA_USERS
    WHERE
        username = upper('WEB_ACCESS');
    IF v_count != 0 THEN
        EXECUTE IMMEDIATE ('DROP USER WEB_ACCESS CASCADE' );
    END IF;
    v_count := 0;
    
     SELECT
        COUNT(1)
    INTO v_count
    FROM
        DBA_USERS
    WHERE
        username = upper('dummy');
    IF v_count != 0 THEN
        EXECUTE IMMEDIATE ('DROP USER dummy CASCADE' );
    END IF;
    v_count := 0;  
END;
/

CREATE USER NEGOCIO IDENTIFIED BY NEGOCIO;
GRANT CREATE SESSION,RESTRICTED SESSION, UNLIMITED TABLESPACE TO NEGOCIO;

CREATE USER WEB_ACCESS IDENTIFIED BY ExternalWeb22; 
GRANT CONNECT, CREATE SESSION, RESTRICTED SESSION TO  WEB_ACCESS;


GRANT EXECUTE ON SYS.DBMS_CRYPTO TO PUBLIC;

CREATE USER dummy IDENTIFIED BY dummy;
GRANT CREATE SESSION,RESTRICTED SESSION TO dummy;
/*
SELECT * FROM DBA_USERS WHERE USERNAME = LOCAL_USER;
CREATE USER LOCAL_USER IDENTIFIED BY LOCAL_PASSWORD;
GRANT CREATE SESSION,SYSDBA, RESTRICTED SESSION TO LOCAL_USER;
*/

--SELECT USERNAME, DEFAULT_TABLESPACE, TEMPORARY_TABLESPACE, CREATED FROM DBA_USERS WHERE USERNAME ='NEGOCIO';

--Se selecciona el nuevo usuario como schema default
ALTER SESSION SET CURRENT_SCHEMA = NEGOCIO;

--Creacion de tablas
CREATE TABLE  TAB_TIPOS_PERSONA(
ID_TIPO_PERSONA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(30) UNIQUE NOT NULL,
PRIMARY KEY(ID_TIPO_PERSONA)
);
COMMENT ON COLUMN NEGOCIO.TAB_TIPOS_PERSONA.ID_TIPO_PERSONA IS 'Llave primaria de los tipos de persona.';
COMMENT ON COLUMN NEGOCIO.TAB_TIPOS_PERSONA.NOMBRE IS 'Nombre de los tipos de persona.';

CREATE TABLE  TAB_ROLES(
ID_ROLE NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(30) UNIQUE NOT NULL,
PRIMARY KEY(ID_ROLE)
);
COMMENT ON COLUMN NEGOCIO.TAB_ROLES.ID_ROLE IS 'Llave primaria de los roles.';
COMMENT ON COLUMN NEGOCIO.TAB_ROLES.NOMBRE IS 'Nombre de los roles.';

CREATE TABLE TAB_ESTADOS_USUARIO(
ID_ESTADO_USUARIO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(30) UNIQUE NOT NULL,
PRIMARY KEY(ID_ESTADO_USUARIO)
);
COMMENT ON COLUMN NEGOCIO.TAB_ESTADOS_USUARIO.ID_ESTADO_USUARIO IS 'Llave primaria de los estados de usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_ESTADOS_USUARIO.NOMBRE IS 'Nombre de los estados de usuario.';

CREATE TABLE TAB_PERSONAS(
ID_PERSONA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
CEDULA NUMBER UNIQUE NOT NULL,
NOMBRE VARCHAR2(30) NOT NULL,
PRIMER_APELLIDO VARCHAR2(30) NOT NULL,
SEGUNDO_APELLIDO VARCHAR2(30),
DIRECCION VARCHAR2(100),
EMAIL VARCHAR2(50),
TELEFONO VARCHAR2(15) NOT NULL,
TIPO_PERSONA_ID NUMBER,
PRIMARY KEY(ID_PERSONA),
CONSTRAINT PK_TAB_PERSONAS_TAB_TIPOS_PERSONA FOREIGN KEY(TIPO_PERSONA_ID) REFERENCES TAB_TIPOS_PERSONA);
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.ID_PERSONA IS 'Llave primaria de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.CEDULA IS 'Numero de cedula de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.NOMBRE IS 'Nombre de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.PRIMER_APELLIDO IS 'Primer apellido de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.SEGUNDO_APELLIDO IS 'Segundo apellido de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.DIRECCION IS 'Direccion de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.EMAIL IS 'Email de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.TELEFONO IS 'Telefono de la persona.';
COMMENT ON COLUMN NEGOCIO.TAB_PERSONAS.TIPO_PERSONA_ID IS 'Llave foranea de la tabla Tipo Persona.';

CREATE TABLE TAB_USUARIOS(
ID_USUARIO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE_USUARIO VARCHAR2(30)UNIQUE NOT NULL,
NOMBRE VARCHAR2(30) NOT NULL,
PRIMER_APELLIDO VARCHAR2(30) NOT NULL,
SEGUNDO_APELLIDO VARCHAR2(30) NOT NULL,
EMAIL VARCHAR2(50) UNIQUE NOT NULL,
CONTRASENA VARCHAR2(40),
TELEFONO VARCHAR2(15) NOT NULL,
ROLE_ID NUMBER,
ESTADO_ID NUMBER,
PRIMARY KEY(ID_USUARIO),
CONSTRAINT PK_TAB_USUARIOS_TAB_ROLES FOREIGN KEY(ROLE_ID) REFERENCES TAB_ROLES,
CONSTRAINT PK_TAB_USUARIOS_TAB_ESTADOS FOREIGN KEY(ESTADO_ID) REFERENCES TAB_ESTADOS_USUARIO);
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.ID_USUARIO IS 'Llave primaria del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.NOMBRE_USUARIO IS 'Pronombre o nickname del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.NOMBRE IS 'Nombre del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.PRIMER_APELLIDO IS 'Primer apellido del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.SEGUNDO_APELLIDO  IS 'Segundo apellido del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.EMAIL IS 'Email del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.CONTRASENA IS 'Contrasena del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.TELEFONO IS 'Numero de telefono del usuario.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.ROLE_ID IS 'Llave foranea de la tabla Roles.';
COMMENT ON COLUMN NEGOCIO.TAB_USUARIOS.ESTADO_ID  IS 'Llave foranea de la tabla Estado Usuario.';


CREATE OR REPLACE TRIGGER HASH_PASSWRD BEFORE INSERT ON TAB_USUARIOS
FOR EACH ROW
BEGIN
:NEW.CONTRASENA := DBMS_CRYPTO.HASH(utl_i18n.string_to_raw(:NEW.CONTRASENA, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH1);
END;
/

CREATE TABLE TAB_CATEGORIAS(
ID_CATEGORIA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(50) UNIQUE NOT NULL,
CATEGORIA_MADRE_ID NUMBER,
PRIMARY KEY(ID_CATEGORIA),
CONSTRAINT PK_TAB_CATEGORIAS_TAB_CATEGORIAS FOREIGN KEY(CATEGORIA_MADRE_ID) REFERENCES TAB_CATEGORIAS);
COMMENT ON COLUMN NEGOCIO.TAB_CATEGORIAS.ID_CATEGORIA IS 'Llave primaria de la categoria.';
COMMENT ON COLUMN NEGOCIO.TAB_CATEGORIAS.NOMBRE IS 'Nombre de la categoria.';
COMMENT ON COLUMN NEGOCIO.TAB_CATEGORIAS.CATEGORIA_MADRE_ID  IS 'Llave primaria de la categoria en caso que se llegue a crear una subcategoria.';

CREATE TABLE TAB_MARCAS(
ID_MARCA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(50) UNIQUE NOT NULL,
PRIMARY KEY(ID_MARCA));
COMMENT ON COLUMN NEGOCIO.TAB_MARCAS.ID_MARCA IS 'Llave primaria de la marca.';
COMMENT ON COLUMN NEGOCIO.TAB_MARCAS.NOMBRE IS 'Nombre de la marca.';

CREATE TABLE TAB_PRODUCTOS(
ID_PRODUCTO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
CODIGO VARCHAR2(30),
CATEGORIA_ID NUMBER,
MARCA_ID NUMBER,
NOMBRE VARCHAR2(30),
DETALLE VARCHAR2(50),
PRECIO NUMBER(8, 2) NOT NULL,
TAMANO VARCHAR2(20),
CANTIDAD NUMBER(5) NOT NULL,
PRIMARY KEY(ID_PRODUCTO),
CONSTRAINT PK_TAB_PRODUCTOS_TAB_CATEGORIAS FOREIGN KEY(CATEGORIA_ID) REFERENCES TAB_CATEGORIAS,
CONSTRAINT PK_TAB_PRODUCTOS_TAB_MARCAS FOREIGN KEY(MARCA_ID) REFERENCES TAB_MARCAS);
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.ID_PRODUCTO IS 'Llave primaria del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.CODIGO IS 'Codigo del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.CATEGORIA_ID  IS 'Llave foranea de la tabla Categorias.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.MARCA_ID IS 'Llave foranea de la tabla Marcas.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.NOMBRE IS 'Nombre del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.DETALLE IS 'Detalles o mas informacion del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.PRECIO IS 'Precio del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.TAMANO IS 'Tama?o del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_PRODUCTOS.CANTIDAD IS 'Cantidad de productos.';

CREATE TABLE TAB_TIPOS_VENTA(
ID_TIPO_VENTA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(30)UNIQUE NOT NULL,
PRIMARY KEY(ID_TIPO_VENTA)
);
COMMENT ON COLUMN NEGOCIO.TAB_TIPOS_VENTA.ID_TIPO_VENTA IS 'Llave primaria del tipo de venta.';
COMMENT ON COLUMN NEGOCIO.TAB_TIPOS_VENTA.NOMBRE IS 'Nombre del tipo de venta.';

CREATE TABLE TAB_MEDIOS_PAGO(
ID_MEDIO_PAGO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(30)UNIQUE NOT NULL,
PRIMARY KEY(ID_MEDIO_PAGO)
);
COMMENT ON COLUMN NEGOCIO.TAB_MEDIOS_PAGO.ID_MEDIO_PAGO IS 'Llave primaria del medio de pago.';
COMMENT ON COLUMN NEGOCIO.TAB_MEDIOS_PAGO.NOMBRE IS 'Nombre del medio de pago.';

CREATE TABLE TAB_FACTURAS (
ID_FACTURA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
VENDEDOR_ID NUMBER,
CLIENTE_ID NUMBER,
TIPO_VENTA_ID NUMBER,
TOTAL_ENTREGA NUMBER(8,2),
TOTAL NUMBER(8,2),
MEDIO_PAGO_ID NUMBER,
FECHA_HORA_VENTA TIMESTAMP DEFAULT SYSDATE,
CONSTRAINT PK_TAB_FACTURAS PRIMARY KEY(ID_FACTURA),
CONSTRAINT PK_TAB_FACTURAS_TAB_USUARIOS FOREIGN KEY(VENDEDOR_ID) REFERENCES TAB_USUARIOS,
CONSTRAINT PK_TAB_FACTURAS_TAB_PERSONAS FOREIGN KEY(CLIENTE_ID) REFERENCES TAB_PERSONAS,
CONSTRAINT PK_TAB_FACTURAS_TAB_TIPOS_VENTA FOREIGN KEY(TIPO_VENTA_ID) REFERENCES TAB_TIPOS_VENTA,
CONSTRAINT PK_TAB_FACTURAS_TAB_MEDIOS_PAGO FOREIGN KEY(MEDIO_PAGO_ID) REFERENCES TAB_MEDIOS_PAGO);
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.ID_FACTURA IS 'Llave primaria de la factura.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.VENDEDOR_ID IS 'Llave foranea de la tabla Usuarios.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.CLIENTE_ID IS 'Llave foranea de la tabla Personas.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.TIPO_VENTA_ID IS 'Llave foranea de la tabla Tipo de Venta.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.TOTAL_ENTREGA IS 'Total a pagar en caso que se deba enviar el producto a otro sitio.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.TOTAL IS 'Total a pagar por el o los productos escogidos.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.MEDIO_PAGO_ID IS 'Llave foranea de la tabla Medio de pago.';
COMMENT ON COLUMN NEGOCIO.TAB_FACTURAS.FECHA_HORA_VENTA IS 'Fecha en que se realiza la compra.';

CREATE TABLE TAB_DETALLES_FACTURA(
ID_FACTURA NUMBER NOT NULL,
ID_DETALLE NUMBER NOT NULL, 
PRODUCTO VARCHAR2(30), 
TAMANO VARCHAR2(30),
CANTIDAD NUMBER(3), 
PRECIO NUMBER(8, 2),
TOTAL_SIN_IVA NUMBER(8, 2),
IVA NUMBER(2,2),
SUBTOTAL NUMBER(8, 2),
PRIMARY KEY(ID_FACTURA,ID_DETALLE), 
CONSTRAINT PK_TAB_DETALLES_FACTURA_TAB_FACTURAS FOREIGN KEY(ID_FACTURA) REFERENCES TAB_FACTURAS ON DELETE CASCADE);
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.ID_FACTURA IS 'Llave foranea de la tabla factura.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.ID_DETALLE IS 'Llave primaria de los detalles de la factura.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.PRODUCTO IS 'Nombre del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.CANTIDAD IS 'Cantidad de productos.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.PRECIO IS 'Precio del producto.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.TOTAL_SIN_IVA IS 'Total a pagar sin agregar el valor de IVA.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.IVA IS 'Valor del IVA.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.SUBTOTAL IS 'Total a pagar con el valor de IVA agregado.';
COMMENT ON COLUMN NEGOCIO.TAB_DETALLES_FACTURA.TAMANO IS 'Tamano del producto';

INSERT INTO TAB_TIPOS_PERSONA (NOMBRE) VALUES ('Colaborador Interno');
INSERT INTO TAB_TIPOS_PERSONA (NOMBRE) VALUES ('Cliente');
INSERT INTO TAB_TIPOS_PERSONA (NOMBRE) VALUES ('Proveedor');

INSERT INTO TAB_ESTADOS_USUARIO (NOMBRE) VALUES ('Activo');
INSERT INTO TAB_ESTADOS_USUARIO (NOMBRE) VALUES ('Bloqueado');

INSERT INTO TAB_ROLES (NOMBRE) VALUES ('Admin');

INSERT INTO TAB_USUARIOS (NOMBRE_USUARIO, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, EMAIL, CONTRASENA, TELEFONO, ROLE_ID, ESTADO_ID) VALUES ('Javier00','Javier','Rivas', 'Meza', 'Javier00@Gmail.com','Test123','61328064',1,1);

INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (117380925,'Shreya','Mcdonald','Strickland','Whitefield View','Shreya@gmail.com','86543422',1);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (168549854,'Xaver','Berry','Mejia','Whitefield View','Xaver@gmail.com','86423531',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (258216514,'Eduard','Fernandez','Palmer','Port Riddell','Eduard@gmail.com','832341',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (296853265,'Dipti','Thompson','Alexander','Fell Heath','Dipti@gmail.com','83153431',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (375481256,'Nuria','Davidson','Mann','Thirlwall Drive','Nuria@gmail.com','83234133',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (596587455,'Ketut','Ramirez','Wise','Southburn Terrace','Ketut@gmail.com','64234131',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (436589754,'Wolfgang','Stevenson','Thornton','Oakley Paddock','Wolfgang@gmail.com','83134133',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (556895687,'Subrahmanya','Burns','Khan','Williamson Bank','Subrahmanya@gmail.com','64354212',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (656895845,'Ptah','Robinson','Kaye','Holden Elms','Ptah@gmail.com','86434231',2);
INSERT INTO TAB_PERSONAS (CEDULA,NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,DIRECCION,EMAIL,TELEFONO,TIPO_PERSONA_ID) VALUES (736524558,'Barbara','Kirby','Rossi','Crispin Coppice','Barbara@gmail.com','75331243',2);
 
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Ropa','');  --1
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Perfumes','');--2
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Licores',''); --3
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Camisas',1); --4
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Pantalonetas',1); --5
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Zapatos',1); --6
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Camisetas',1); --7
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Vino',3); --8
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Abrigos',1); --9
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Medias',1); --10
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Boxers',1); --11
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Perfumes Hombre',2); --12
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Perfumes Mujer',2); --13
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Whisky',3); --14
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Tipo licor 2',3); --15
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Tipo licor 3',3); --16
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Vestidos',1); --17
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Pantalones',1); --18
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Chaquetas',1); --19
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Tequila',3); --20
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Ron',3); --21
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Ginebra',3); --22
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Vodka', 3); --23
INSERT INTO TAB_CATEGORIAS  (NOMBRE,CATEGORIA_MADRE_ID) VALUES ('Licras', 1); --24

INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Nike'); --1
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Adidas');--2
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Puma');--3
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Bocceli');--4
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('CHANEL');--5
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('HERMES Paris');--6
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('ck');--7
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Hugo BOSS');--8
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Jack Daniels');--9
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Johhny Walker');--10
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Carolina Herrera');--11
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Dior');--12
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Gucci');--13
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Polo');--14
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Tommy Hilfiger');--15
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Giorgo Armani');--16
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Versace');--17
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Ralph Lauren');--18
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Dolce Gabanna');--19
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Levis');--20
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('New Balance');--21
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Pull and Bear');--22
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Lacoste');--23
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('H and M');--24
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Don Julio');--25
INSERT INTO TAB_MARCAS (NOMBRE) VALUES ('Victorinox');--26

INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('B9330313',4,4,'Camisa manga larga','Negra',25500,'S',24); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('B9330313',4,4,'Camisa manga larga','Negra',25500,'M',10); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('B9330313',4,4,'Camisa manga larga','Negra',25500,'L',15);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35027996',18,4,'Jeans Denim Stretch','Bota Slim, Color Negro',24900,'28',5); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35027996',18,4,'Jeans Denim Stretch','Bota Slim, Color Negro',24900,'30',6); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35027996',18,4,'Jeans Denim Stretch','Bota Slim, Color Negro',24900,'32',4); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35027996',18,4,'Jeans Denim Stretch','Bota Slim, Color Negro',24900,'34',7); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35027996',18,4,'Jeans Denim Stretch','Bota Slim, Color Negro',24900,'36',8); 
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('79330563',7,4,'Camiseta tipo polo','Tela Pique',23900,'S',14);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('79330563',7,4,'Camiseta tipo polo','Tela Pique',23900,'M',10);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('79330563',7,4,'Camiseta tipo polo','Tela Pique',23900,'L',9);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('79330563',7,4,'Camiseta tipo polo','Tela Pique',23900,'XL',7);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35025956',19,4,'Chaqueta impermeable','Gorro Removible, Negra',41900,'S',6);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35025956',19,4,'Chaqueta impermeable','Gorro Removible, Negra',41900,'M',6);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('35025956',19,4,'Chaqueta impermeable','Gorro Removible, Negra',41900,'L',6);
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('46583214',12,23,'Colonia Eau de Lacoste','L.12.12 Blanco Hombre',25500,'100ml',3);--16
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('46583215',13,23,'Colonia Eau de Lacoste','L.12.12 Blanco Mujer',25500,'100ml',3);--17
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('97987546',5,20,'Pantalon Levis','Pantalon Cafe', 30500,'31',2);--18
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('97987547',5,20,'Pantalon Levis','Pantalon Negro', 30500,'29',2);--19
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('97987546',5,20,'Pantalon Levis','Pantalon Azul', 30500,'31',2);--20
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('74641318',14,10,'Johnnie Walker','Red Label Whisky', 15000,'750ml',2);--21
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('74641315',14,10,'Johnnie Walker','Black Label Whisky', 15000,'750ml',3);--22
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('74641318',14,10,'Johnnie Walker','Gold Label Whisky', 20000,'750ml',2);--23
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('74641319',14,10,'Johnnie Walker','Red Label Whisky', 15000,'750ml',2);--24
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('77881318',20,25,'Don Julio','Tequila anejo', 15000,'750ml',2);--25
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('74222518',12,26,'Victorinox','Swiss Army Altitude', 15000,'750ml',3);--26
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('74630318',13,26,'Victorinox','Swiss Army Altitude', 15000,'300ml',4);--27
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('23116769',4,15,'Tommy Hilfiger','Camisa de Verano Hombre', 12000,'M',3);--28
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('23116769',4,15,'Tommy Hilfiger','Camisa de Verano Hombre', 12000,'S',3);--29
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('23116789',9,15,'Tommy Hilfiger','Pantalon de vestir Hombre', 12000,'32',3);--30
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('23116789',9,15,'Tommy Hilfiger','Pantalon de vestir Hombre', 12000,'29',3);--31
INSERT INTO TAB_PRODUCTOS(CODIGO, CATEGORIA_ID , MARCA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) VALUES ('23116789',9,15,'Tommy Hilfiger','Pantalon de vestir Hombre', 12000,'31',3);--32

--Se crea el custom type OBJ_FACTURA_DETALLE
CREATE OR REPLACE TYPE OBJ_DETALLE_FACTURA AS OBJECT 
(
ProductoID NUMBER,
Cantidad NUMBER,
Precio  NUMBER (8,2),
IVA NUMBER (2, 2)
);
/

--Se crea el custom type OBJ_DETALLES_FACTURA el cual contiene objetos tipo OBJ_FACTURA_DETALLE
CREATE OR REPLACE TYPE OBJ_DETALLES_FACTURA AS TABLE OF OBJ_DETALLE_FACTURA;
/

-- View de PERSONAS
CREATE OR REPLACE VIEW VW_PERSONAS AS
SELECT
ID_PERSONA, PER.CEDULA, PER.NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, DIRECCION, EMAIL, TELEFONO, T.NOMBRE AS TIPO_PERSONA
FROM TAB_PERSONAS PER
LEFT JOIN TAB_TIPOS_PERSONA T
ON TIPO_PERSONA_ID = ID_TIPO_PERSONA;

--View para hacer la tabla usuarios presentable
CREATE OR REPLACE VIEW VW_USUARIOS AS 
SELECT ID_USUARIO, NOMBRE_USUARIO, U.NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, EMAIL, TELEFONO, R.NOMBRE AS ROL , EU.NOMBRE AS ESTADO_USUARIO
FROM TAB_USUARIOS U
LEFT JOIN TAB_ROLES R
ON ROLE_ID = ID_ROLE
LEFT JOIN TAB_ESTADOS_USUARIO EU
ON  ESTADO_ID = ID_ESTADO_USUARIO ;


--View para hacer la tabla productos presentable
CREATE OR REPLACE VIEW VW_PRODUCTOS AS 
SELECT P.ID_PRODUCTO,  P.CODIGO, M.NOMBRE AS "MARCA", C.NOMBRE AS "CATEGORIA", P.NOMBRE, P.DETALLE, P.PRECIO, P.TAMANO, P.CANTIDAD
FROM TAB_PRODUCTOS P
INNER JOIN TAB_CATEGORIAS C
ON P.CATEGORIA_ID = C.ID_CATEGORIA
INNER JOIN TAB_MARCAS M
ON  P.MARCA_ID = M.ID_MARCA;

--View que hace la tabla categorias mas presentable
CREATE OR REPLACE VIEW VW_CATEGORIAS AS
SELECT C.ID_CATEGORIA, C.NOMBRE AS CATEGORIA, CM.NOMBRE AS CATEGORIA_MADRE, C.CATEGORIA_MADRE_ID
FROM TAB_CATEGORIAS C
INNER JOIN TAB_CATEGORIAS CM
ON C.CATEGORIA_MADRE_ID = CM.ID_CATEGORIA
WHERE C.CATEGORIA_MADRE_ID IS NOT NULL;

--View para hacer la tabla de facturas presentable
CREATE OR REPLACE VIEW VW_FACTURAS AS 
SELECT ID_FACTURA, U.NOMBRE || ' ' || U.PRIMER_APELLIDO AS VENDEDOR, P.NOMBRE || ' ' || P.PRIMER_APELLIDO AS CLIENTE, TV.NOMBRE AS TIPO_VENTA, TOTAL_ENTREGA, TOTAL, MP.NOMBRE AS MEDIO_DE_PAGO, FECHA_HORA_VENTA
FROM TAB_FACTURAS F
LEFT JOIN TAB_USUARIOS U
ON VENDEDOR_ID = ID_USUARIO
LEFT JOIN TAB_PERSONAS P
ON CLIENTE_ID = ID_PERSONA
LEFT JOIN TAB_TIPOS_VENTA TV
ON TIPO_VENTA_ID = ID_TIPO_VENTA
LEFT JOIN TAB_MEDIOS_PAGO MP
ON MEDIO_PAGO_ID = ID_MEDIO_PAGO;

--View para hacer facturas-detalles presentables
CREATE OR REPLACE VIEW VW_DETALLES_FACTURA AS 
SELECT DET.ID_FACTURA, DET.ID_DETALLE, DET.PRODUCTO, DET.TAMANO, DET.PRECIO, DET.CANTIDAD 
FROM TAB_DETALLES_FACTURA DET;
    
    
-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Procedimientos almacenados <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


-->>>>>>>>>>> Paquete Facturacion <<<<<<<<<<<

-- Obtener la factura maxima existente que haya sido creada por el usuario actual.
CREATE OR REPLACE PROCEDURE SP_OBTENER_MAX_FACTURA (IN_ID_USUARIO IN NUMBER, OUT_MAX_FACTURA OUT NUMBER) AS 
BEGIN
SELECT MAX(ID_FACTURA) INTO OUT_MAX_FACTURA FROM TAB_FACTURAS
WHERE VENDEDOR_ID = IN_ID_USUARIO;
END;
/

-- Obtener el detalle maximo de una factura en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_MAX_DETALLE_EN_FACTURA (IN_ID_FACTURA IN NUMBER , OUT_MAX_DETALLE OUT NUMBER) AS 
BEGIN
SELECT MAX(ID_DETALLE) INTO OUT_MAX_DETALLE 
FROM TAB_DETALLES_FACTURA DET
WHERE DET.ID_FACTURA = IN_ID_FACTURA;
IF OUT_MAX_DETALLE IS NULL THEN
OUT_MAX_DETALLE :=0;
END IF;
END;
/

--Este procedimiento remueve X cantidad de un producto en especifico del inventario
CREATE OR REPLACE PROCEDURE SP_REMOVER_PRODUCTO (IN_ID_PRODUCTO IN NUMBER, IN_CANTIDAD IN NUMBER, RESULTADO OUT NUMBER) AS 
BEGIN
UPDATE TAB_PRODUCTOS SET CANTIDAD = CANTIDAD-IN_CANTIDAD WHERE ID_PRODUCTO = IN_ID_PRODUCTO;
DBMS_OUTPUT.put_line(IN_CANTIDAD || ' unidades del producto '  || IN_ID_PRODUCTO || ' removidas'  );
RESULTADO := 0;
END;
/

--Este procedimiento se encarga de revisar si existe o no suficiente inventario como para remover X cantidad de un producto en especifico
CREATE OR REPLACE PROCEDURE SP_INVENTARIO_REVISION (IN_ID_PRODUCTO IN NUMBER, IN_CANTIDAD IN NUMBER, RESULTADO OUT NUMBER) AS
V_CANTIDAD_DISPONIBLE NUMBER;
BEGIN
SELECT CANTIDAD INTO V_CANTIDAD_DISPONIBLE FROM TAB_PRODUCTOS PRODS WHERE ID_PRODUCTO = IN_ID_PRODUCTO;
    IF V_CANTIDAD_DISPONIBLE >= IN_CANTIDAD THEN
        RESULTADO := 0;       
    ELSE 
        RESULTADO := 1;
    END IF;
END;
/

-- Este proceso hace el llamado a SP_INVENTARIO_REVISION y de revcibir un resultado positivo substrae la cantidad de productos establecida
CREATE OR REPLACE PROCEDURE SP_REVISION_Y_SUBSTRACCION_PRODUCTOS(IN_OBJ_DETALLES_FACTURA IN OBJ_DETALLES_FACTURA, OUT_PRODUCTO_PROBLEMA OUT VARCHAR, RESULTADO OUT NUMBER) AS 
V_RESPUESTA_INV_REVISION NUMBER ;
V_RESULTADO_REMOVER_PRODUCTO NUMBER;
BEGIN
  FOR i IN 1..IN_OBJ_DETALLES_FACTURA.COUNT LOOP 
    SP_INVENTARIO_REVISION(IN_OBJ_DETALLES_FACTURA(i).ProductoID, IN_OBJ_DETALLES_FACTURA(i).Cantidad, V_RESPUESTA_INV_REVISION);
    OUT_PRODUCTO_PROBLEMA  := IN_OBJ_DETALLES_FACTURA(i).ProductoID ;
    EXIT WHEN V_RESPUESTA_INV_REVISION = 1;
  END LOOP;
  
  IF V_RESPUESTA_INV_REVISION=1 THEN
      SELECT NOMBRE INTO OUT_PRODUCTO_PROBLEMA FROM TAB_PRODUCTOS WHERE ID_PRODUCTO = OUT_PRODUCTO_PROBLEMA; 
      RESULTADO := 1;
  ELSE
      FOR i IN 1..IN_OBJ_DETALLES_FACTURA.COUNT LOOP 
      SP_REMOVER_PRODUCTO (IN_OBJ_DETALLES_FACTURA(i).ProductoID, IN_OBJ_DETALLES_FACTURA(i).Cantidad, V_RESULTADO_REMOVER_PRODUCTO);
      END LOOP;
      RESULTADO := 0;
  END IF;
  
END;
/

--Este procedimiento tiene como objetivo ingresar un detalle de factura calculando a su vez el subtotal
CREATE OR REPLACE PROCEDURE SP_INSERTAR_DETALLE_FACTURA (IN_ID_USUARIO IN NUMBER, IN_PRODUCTO_ID IN NUMBER, IN_CANTIDAD IN NUMBER, IN_IVA IN NUMBER) AS 
V_MAX_FACTURA NUMBER;
OUT_MAX_DETALLE NUMBER;
V_TOTAL_SIN_IVA NUMBER(8, 2);
V_PRECIO_PRODUCTO NUMBER(8,2);
V_SUBTOTAL NUMBER(8, 2);
V_PRODUCTO VARCHAR2(30);
V_TAMANO VARCHAR2(30);
BEGIN
SP_OBTENER_MAX_FACTURA(IN_ID_USUARIO, V_MAX_FACTURA);
SP_OBTENER_MAX_DETALLE_EN_FACTURA (V_MAX_FACTURA, OUT_MAX_DETALLE);
OUT_MAX_DETALLE := OUT_MAX_DETALLE+1;
SELECT NOMBRE, PRECIO, TAMANO INTO V_PRODUCTO, V_PRECIO_PRODUCTO, V_TAMANO FROM VW_PRODUCTOS P WHERE  P.ID_PRODUCTO = IN_PRODUCTO_ID;
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, CANTIDAD, TAMANO, PRECIO, IVA) 
VALUES (V_MAX_FACTURA, OUT_MAX_DETALLE, V_PRODUCTO, IN_CANTIDAD, V_TAMANO, V_PRECIO_PRODUCTO, IN_IVA);
END; 
/

-- Este proceso hace el calculo del total de una factura en especifico y lo a?ade a su row en la tabla.
CREATE OR REPLACE PROCEDURE SP_CALCULAR_TOTAL_FACTURA(IN_FACTURA_ID NUMBER) AS 
OUT_TOTAL_FACTURA DECIMAL;
TMP_TOTAL_ENTREGA DECIMAL;
BEGIN
SELECT SUM(SUBTOTAL)INTO OUT_TOTAL_FACTURA FROM TAB_DETALLES_FACTURA WHERE ID_FACTURA = IN_FACTURA_ID;
SELECT TOTAL_ENTREGA INTO TMP_TOTAL_ENTREGA FROM TAB_FACTURAS WHERE ID_FACTURA = IN_FACTURA_ID;

UPDATE TAB_FACTURAS SET TOTAL = OUT_TOTAL_FACTURA+TMP_TOTAL_ENTREGA  WHERE ID_FACTURA = IN_FACTURA_ID;
END;
/

--Este procedimiento crea hace el llamado a SP_REVISION_Y_SUBSTRACCION_PRODUCTOS y en caso de recibir un resultado positivo crea la factura y por medio de SP_INSERTAR_DETALLE_FACTURA sus detalles 
CREATE OR REPLACE PROCEDURE SP_INSERTAR_FACTURA 
(IN_ID_VENDEDOR IN NUMBER, IN_ID_CLIENTE IN NUMBER, IN_TIPO_VENTA_ID IN NUMBER, IN_TOTAL_ENTREGA IN NUMBER, IN_MEDIO_PAGO_ID IN NUMBER, IN_OBJ_DETALLES_FACTURA IN OBJ_DETALLES_FACTURA, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
V_FECHA TIMESTAMP := SYSDATE;
V_OUT_PRODUCTO_PROBLEMA TAB_PRODUCTOS.NOMBRE%TYPE;
V_RESULTADO__REVISION_Y_SUBTRACCION NUMBER;
V_MAX_FACTURA NUMBER;
BEGIN
    SP_REVISION_Y_SUBSTRACCION_PRODUCTOS(IN_OBJ_DETALLES_FACTURA, V_OUT_PRODUCTO_PROBLEMA,  V_RESULTADO__REVISION_Y_SUBTRACCION);
    IF V_RESULTADO__REVISION_Y_SUBTRACCION = 0
        THEN
            INSERT INTO TAB_FACTURAS (VENDEDOR_ID, CLIENTE_ID, TIPO_VENTA_ID, TOTAL_ENTREGA, TOTAL, MEDIO_PAGO_ID, FECHA_HORA_VENTA) 
            VALUES (IN_ID_VENDEDOR, IN_ID_CLIENTE, IN_TIPO_VENTA_ID, IN_TOTAL_ENTREGA, 0, IN_MEDIO_PAGO_ID, V_FECHA); 
            FOR i IN 1..IN_OBJ_DETALLES_FACTURA.COUNT LOOP
                SP_INSERTAR_DETALLE_FACTURA(IN_ID_VENDEDOR, IN_OBJ_DETALLES_FACTURA(i).ProductoID, IN_OBJ_DETALLES_FACTURA(i).Cantidad, IN_OBJ_DETALLES_FACTURA(i).IVA);
                RESULTADO := 0;
                MENSAJE := 'Factura creada correctamente';
            END LOOP; 
            SP_OBTENER_MAX_FACTURA(IN_ID_VENDEDOR, V_MAX_FACTURA);
            SP_CALCULAR_TOTAL_FACTURA(V_MAX_FACTURA);
        ELSE
        RESULTADO := 1;
        MENSAJE := 'No hay suficientes unidades del Producto: ' || V_OUT_PRODUCTO_PROBLEMA;
    END IF;
END; 
/

-- Obtener todas las facturas existentes.
CREATE OR REPLACE PROCEDURE SP_OBTENER_FACTURAS (FACTURAS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN FACTURAS FOR
SELECT *
FROM VW_FACTURAS;
RESULTADO := 0;
END;
/



-- Permite obtener los detalles de una factura en especifico junto con un cursor que contiene sus detalles
CREATE OR REPLACE PROCEDURE SP_OBTENER_FACTURA_CON_DETALLES (IN_ID_FACTURA IN NUMBER, OUT_ID_FACTURA OUT NUMBER, OUT_VENDEDOR OUT VARCHAR2, OUT_CLIENTE OUT VARCHAR2, OUT_TIPO_VENTA OUT VARCHAR2, OUT_TOTAL_ENTREGA OUT DECIMAL,
OUT_TOTAL OUT DECIMAL, OUT_MEDIO_DE_PAGO OUT VARCHAR2, OUT_FECHA_HORA_VENTA OUT TIMESTAMP, DETALLES OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
SELECT * INTO OUT_ID_FACTURA, OUT_VENDEDOR, OUT_CLIENTE, OUT_TIPO_VENTA, OUT_TOTAL_ENTREGA, OUT_TOTAL, OUT_MEDIO_DE_PAGO, OUT_FECHA_HORA_VENTA FROM VW_FACTURAS
WHERE ID_FACTURA = IN_ID_FACTURA;
OPEN DETALLES FOR
SELECT *
FROM VW_DETALLES_FACTURA WHERE ID_FACTURA= IN_ID_FACTURA;
RESULTADO := 0;
END;
/

-- Elimina una factura en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_FACTURA (IN_ID_FACTURA IN NUMBER , RESULTADO OUT NUMBER,  MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_FACTURAS WHERE IN_ID_FACTURA = ID_FACTURA;
RESULTADO :=0;
MENSAJE := 'La factura y sus respectivos detalles fueron eliminados satisfactoriamente';
END;
/

--Este procedimiento inserta un tipo de venta para facturacion
CREATE OR REPLACE PROCEDURE SP_INSERTAR_TIPO_VENTA (IN_NOMBRE VARCHAR2, RESULTADO OUT NUMBER,  MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:=0;
INSERT INTO TAB_TIPOS_VENTA (NOMBRE) 
VALUES (IN_NOMBRE);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar el tipo de venta ya que existe otro con el mismo nombre en el sistema';
END;
/

--Devolver los diferentes tipos de venta
CREATE OR REPLACE PROCEDURE SP_OBTENER_TIPOS_VENTA (TIPOS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN TIPOS FOR 
SELECT *
FROM TAB_TIPOS_VENTA;
END;
/

----Devolver un tipo de venta en base a su ID
CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_TIPO_VENTA (IN_TIPO_VENTA IN NUMBER, OUT_TIPO OUT VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
SELECT NOMBRE INTO OUT_TIPO  FROM TAB_TIPOS_VENTA WHERE ID_TIPO_VENTA = IN_TIPO_VENTA;
END;
/

--Este procedimiento modifica a un tipo de venta en especifico
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_TIPO_VENTA (IN_ID_TIPO_VENTA IN NUMBER, IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE TAB_TIPOS_VENTA 
SET 
NOMBRE=IN_NOMBRE
WHERE ID_TIPO_VENTA = IN_ID_TIPO_VENTA;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar el tipo de venta ya que el nuevo nombre esta siendo utilizado por otro en el sistema';
    RESULTADO := 1;
END;
/


-- Elimina un tipo de venta en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_TIPO_VENTA (IN_ID_TIPO_VENTA IN NUMBER , RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_TIPOS_VENTA WHERE ID_TIPO_VENTA = IN_ID_TIPO_VENTA;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'El tipo de venta no fue eliminado ya que hay facturas bajo dicho tipo';
    RESULTADO := 1;
END;
/

--Este procedimiento inserta un medio de pago para facturacion
CREATE OR REPLACE PROCEDURE SP_INSERTAR_MEDIO_PAGO (IN_NOMBRE VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:=0;
INSERT INTO TAB_MEDIOS_PAGO (NOMBRE) 
VALUES (IN_NOMBRE);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se puede agregar un nombre ya en uso por otro medio de pago';
END;
/

--Este procedimiento devuelve todos los medios de pago
CREATE OR REPLACE PROCEDURE SP_OBTENER_MEDIOS_PAGO (MEDIOS_DE_PAGO OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
OPEN MEDIOS_DE_PAGO FOR 
SELECT *
FROM TAB_MEDIOS_PAGO;
END;
/

--Este procedimiento devuelve un medio de pago en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_MEDIO_PAGO (IN_ID_MEDIO_PAGO IN NUMBER, MEDIO_PAGO OUT VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
SELECT NOMBRE INTO MEDIO_PAGO
FROM TAB_MEDIOS_PAGO 
WHERE ID_MEDIO_PAGO  = IN_ID_MEDIO_PAGO ;
END;
/

--Este procedimiento modifica a un medio de pago en especifico
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_MEDIO_PAGO (IN_ID_MEDIO_PAGO IN NUMBER, IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE TAB_MEDIOS_PAGO 
SET 
NOMBRE=IN_NOMBRE
WHERE ID_MEDIO_PAGO = IN_ID_MEDIO_PAGO ;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar el medio de pago ya que el nuevo nombre esta siendo utilizado por otro en el sistema';
    RESULTADO := 1;
END;
/

-- Elimina un tipo de medio de pago en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_MEDIO_PAGO (IN_ID_MEDIO_PAGO IN NUMBER, RESULTADO OUT NUMBER,  MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_MEDIOS_PAGO WHERE ID_MEDIO_PAGO = IN_ID_MEDIO_PAGO;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'El medio de pago no fue eliminado ya que hay facturas bajo dicho tipo de medio de pago';
    RESULTADO := 1;
END;
/

-->>>>>>>>>>> Paquete Personas <<<<<<<<<<<<<
CREATE OR REPLACE PACKAGE PKG_PERSONAS
IS
    PROCEDURE SP_INSERTAR_PERSONA (IN_CEDULA IN NUMBER, IN_NOMBRE IN VARCHAR2, IN_PRIMER_APELLIDO IN VARCHAR2, 
IN_SEGUNDO_APELLIDO IN VARCHAR2, IN_DIRECCION IN VARCHAR2, IN_EMAIL VARCHAR2, IN_TELEFONO IN VARCHAR2, IN_TIPO_PERSONA_ID IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2
    );
END;
/
----------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY PKG_PERSONAS
IS
--Este procedimiento ingresa una persona
PROCEDURE SP_INSERTAR_PERSONA (IN_CEDULA IN NUMBER, IN_NOMBRE IN VARCHAR2, IN_PRIMER_APELLIDO IN VARCHAR2, 
IN_SEGUNDO_APELLIDO IN VARCHAR2, IN_DIRECCION IN VARCHAR2, IN_EMAIL VARCHAR2, IN_TELEFONO IN VARCHAR2, IN_TIPO_PERSONA_ID IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:= 0;
INSERT INTO TAB_PERSONAS (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, DIRECCION, EMAIL, TELEFONO, TIPO_PERSONA_ID) 
VALUES (IN_CEDULA, IN_NOMBRE, IN_PRIMER_APELLIDO, IN_SEGUNDO_APELLIDO, IN_DIRECCION, IN_EMAIL, IN_TELEFONO, IN_TIPO_PERSONA_ID);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar la persona ya que la cedula ingresada ya se encuentra en el sistema';
END;

END;
/
--Este procedimiento modifica a una persona en especifico
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PERSONA (IN_ID_PERSONA IN NUMBER, IN_CEDULA IN NUMBER, IN_NOMBRE IN VARCHAR2, IN_PRIMER_APELLIDO IN VARCHAR2,
IN_SEGUNDO_APELLIDO IN VARCHAR2, IN_DIRECCION IN VARCHAR2, IN_EMAIL VARCHAR2, IN_TELEFONO IN VARCHAR2, IN_TIPO_PERSONA_ID IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE TAB_PERSONAS 
SET 
CEDULA= IN_CEDULA,
NOMBRE=IN_NOMBRE,
PRIMER_APELLIDO=IN_PRIMER_APELLIDO,
SEGUNDO_APELLIDO=IN_SEGUNDO_APELLIDO,
DIRECCION=IN_DIRECCION,
EMAIL=IN_EMAIL,
TELEFONO= IN_TELEFONO,
TIPO_PERSONA_ID=IN_TIPO_PERSONA_ID
WHERE ID_PERSONA = IN_ID_PERSONA;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar al persona ya que la nueva cedula esta siendo utilizado por otra en el sistema';
    RESULTADO := 1;
END;
/ 

--Este procedimiento devuelve todas las personas
CREATE OR REPLACE PROCEDURE SP_OBTENER_PERSONAS (PERSONAS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
OPEN PERSONAS FOR 
SELECT *
FROM NEGOCIO.VW_PERSONAS;
END;
/

--Este procedimiento devuelve una persona en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_UNA_PERSONA (IN_ID_PERSONA IN NUMBER, PERSONAS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
OPEN PERSONAS FOR 
SELECT *
FROM NEGOCIO.VW_PERSONAS
WHERE ID_PERSONA = IN_ID_PERSONA ;
END;
/

-- Elimina una persona en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PERSONA (IN_ID_PERSONA IN NUMBER , RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
RESULTADO := 0;
DELETE FROM TAB_PERSONAS WHERE IN_ID_PERSONA = ID_PERSONA;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'La persona no fue eliminada ya que cuenta con facturas asignadas a ella';
    RESULTADO := 1;
END;
/
 
--Este procedimiento inserta un tipo de persona
CREATE OR REPLACE PROCEDURE SP_INSERTAR_TIPO_PERSONA (IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER,  MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:=0;
INSERT INTO TAB_TIPOS_PERSONA (NOMBRE) 
VALUES (IN_NOMBRE);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar la categoria ya que existe otra con el mismo nombre en el sistema';
END;
/

--Devolver los diferentes tipos de persona
CREATE OR REPLACE PROCEDURE SP_OBTENER_TIPOS_PERSONA (TIPOS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN TIPOS FOR 
SELECT ID_TIPO_PERSONA, NOMBRE
FROM TAB_TIPOS_PERSONA;
END;
/

----Devolver un tipo de persona en base a su ID
CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_TIPO_PERSONA (IN_TIPO_PERSONA IN NUMBER, OUT_TIPO OUT VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
SELECT NOMBRE INTO OUT_TIPO  FROM TAB_TIPOS_PERSONA WHERE ID_TIPO_PERSONA = IN_TIPO_PERSONA;
END;
/

--Este procedimiento modifica a un tipo de persona en especifico
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_TIPO_PERSONA (IN_ID_TIPO_PERSONA IN NUMBER, IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE TAB_TIPOS_PERSONA 
SET 
NOMBRE=IN_NOMBRE
WHERE ID_TIPO_PERSONA = IN_ID_TIPO_PERSONA;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar el tipo de persona ya que el nuevo nombre esta siendo utilizado por otro en el sistema';
    RESULTADO := 1;
END;
/ 

-- Elimina un tipo de persona en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_TIPO_PERSONA (IN_ID_TIPO_PERSONA IN NUMBER , RESULTADO OUT NUMBER,  MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_TIPOS_PERSONA WHERE IN_ID_TIPO_PERSONA = ID_TIPO_PERSONA;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'El tipo de persona no fue eliminado ya que hay personas bajo dicho tipo';
    RESULTADO := 1;
END;
/

-->>>>>>>>>>> Paquete Usuario<<<<<<<<<<<<<
CREATE OR REPLACE PROCEDURE SP_OBTENER_USUARIOS (USUARIOS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
OPEN USUARIOS FOR 
SELECT * FROM NEGOCIO.VW_USUARIOS;
END;
/


CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_USUARIO (IN_ID_USUARIO IN NUMBER, USUARIOS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
OPEN USUARIOS FOR 
SELECT * FROM NEGOCIO.TAB_USUARIOS
WHERE ID_USUARIO = IN_ID_USUARIO ;
RESULTADO := 0;
MENSAJE := 'Se obtuvo el usuario';
END;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_USUARIO (IN_ID_USUARIO IN NUMBER , RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_USUARIOS WHERE IN_ID_USUARIO = ID_USUARIO;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'El usuario no fue eliminado ya que se encuentra logueado';
    RESULTADO := 1;
END;
/

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_USUARIO (IN_ID_USUARIO IN NUMBER, IN_NOMBRE_USUARIO IN VARCHAR2, IN_NOMBRE IN VARCHAR2, IN_PRIMER_APELLIDO IN VARCHAR2,
IN_SEGUNDO_APELLIDO IN VARCHAR2,  IN_EMAIL VARCHAR2,  IN_CONTRASENA VARCHAR2, IN_TELEFONO IN VARCHAR2,  IN_ROL_ID IN NUMBER, IN_ESTADO_ID IN NUMBER,  RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE NEGOCIO.TAB_USUARIOS
SET 
NOMBRE_USUARIO = IN_NOMBRE_USUARIO,
NOMBRE=IN_NOMBRE,
PRIMER_APELLIDO=IN_PRIMER_APELLIDO,
SEGUNDO_APELLIDO=IN_SEGUNDO_APELLIDO,
EMAIL=IN_EMAIL,
CONTRASENA = IN_CONTRASENA,
TELEFONO= IN_TELEFONO,
ROLE_ID=IN_ROL_ID,
ESTADO_ID=IN_ESTADO_ID
WHERE ID_USUARIO = IN_ID_USUARIO;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar al usuario ya que el nuevo nombre de usuario o correo esta siendo utilizado por otro en el sistema';
    RESULTADO := 1;
END;
/ 

--Este procedimiento inserta un nuevo usuario
create or replace PROCEDURE SP_INSERTAR_USUARIO (NOMBRE_USUARIO IN VARCHAR2, NOMBRE IN VARCHAR2, IN_PRIMER_APELLIDO IN VARCHAR2, IN_SEGUNDO_APELLIDO IN VARCHAR2, 
IN_EMAIL IN VARCHAR2, IN_CONTRASENA IN VARCHAR2, IN_TELEFONO IN VARCHAR2, IN_ROLE_ID IN NUMBER, IN_ESTADO_ID IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:= 0;
INSERT INTO TAB_USUARIOS (NOMBRE_USUARIO, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, EMAIL, CONTRASENA, TELEFONO, ROLE_ID, ESTADO_ID) 
VALUES (NOMBRE_USUARIO, NOMBRE, IN_PRIMER_APELLIDO, IN_SEGUNDO_APELLIDO, IN_EMAIL, IN_CONTRASENA, IN_TELEFONO, IN_ROLE_ID, IN_ESTADO_ID);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar el usuario ya que el nombre de usuario ingresado ya se encuentra en uso en el sistema';
END;
/

--Este procedimiento inserta un estado de usuario
CREATE OR REPLACE PROCEDURE SP_INSERTAR_ESTADO_USUARIO (IN_NOMBRE VARCHAR2, RESULTADO OUT NUMBER,  MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:=0;
INSERT INTO TAB_ESTADOS_USUARIO (NOMBRE) 
VALUES (IN_NOMBRE);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se puede agregar un nombre ya en uso por otro estado';
END;
/

--Devolver los diferentes estados de usuario
CREATE OR REPLACE PROCEDURE SP_OBTENER_ESTADOS_USUARIO (ESTADOS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN ESTADOS FOR 
SELECT ID_ESTADO_USUARIO, NOMBRE
FROM TAB_ESTADOS_USUARIO;
RESULTADO:= 0;
END;
/

--Devolver un estado en base a un id
CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_ESTADO_USUARIO(IN_ID_ESTADO_USUARIO IN NUMBER, ESTADO OUT VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
SELECT NOMBRE INTO ESTADO FROM TAB_ESTADOS_USUARIO WHERE ID_ESTADO_USUARIO = IN_ID_ESTADO_USUARIO;
RESULTADO:= 0;
END;
/

--Este procedimiento modifica a un tipo de persona en especifico
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_ESTADO_USUARIO (IN_ID_ESTADO_USUARIO IN NUMBER, IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE TAB_ESTADOS_USUARIO
SET 
NOMBRE=IN_NOMBRE
WHERE ID_ESTADO_USUARIO = IN_ID_ESTADO_USUARIO;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar el estado de usuario ya que el nuevo nombre esta siendo utilizado por otro en el sistema';
    RESULTADO := 1;
END;
/ 

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_ESTADO_USUARIO (IN_ID_ESTADO_USUARIO IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_ESTADOS_USUARIO WHERE IN_ID_ESTADO_USUARIO = ID_ESTADO_USUARIO;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'Actualmente hay usuarios con dicho estado asignado. Asegurese de asignarles otro estado antes de intentar eliminar el estado';
    RESULTADO := 1;
END;
/

--Este procedimiento inserta un role
CREATE OR REPLACE PROCEDURE SP_INSERTAR_ROLE (IN_NOMBRE VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:=0;
INSERT INTO  TAB_ROLES (NOMBRE) 
VALUES (IN_NOMBRE);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar el tipo de role ya que existe otro con el mismo nombre en el sistema';
END;
/

--Este objeto devuelve todos los roles de usuario disponibles
CREATE OR REPLACE PROCEDURE SP_OBTENER_ROLES(ROLES_USUARIO OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN ROLES_USUARIO FOR 
SELECT ID_ROLE, NOMBRE
FROM TAB_ROLES;
RESULTADO:= 0;
END;
/


--Este procedimiento devuelve un role de usuario en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_ROLE(IN_ID_ROLE IN NUMBER, ROLE_USUARIO OUT VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
SELECT NOMBRE INTO ROLE_USUARIO
FROM TAB_ROLES
WHERE ID_ROLE  = IN_ID_ROLE ;
END;
/

-- Modifica un role en especifico
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_ROLE (IN_ID_ROLE IN NUMBER , IN_NOMBRE VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
RESULTADO :=0;
MENSAJE := 'El role fue modificado satisfactoriamente';
UPDATE TAB_ROLES SET 
NOMBRE = IN_NOMBRE 
WHERE IN_ID_ROLE = ID_ROLE;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar el role ya que el nuevo nombre esta siendo utilizado por otro en el sitema';
    RESULTADO := 1;
END;
/

-- Elimina un role en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_ROLE (IN_ID_ROLE IN NUMBER , RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_ROLES WHERE IN_ID_ROLE = ID_ROLE;
RESULTADO :=0;
MENSAJE := 'El role fue eliminado satisfactoriamente';
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'Actualmente hay usuarios con dicho role en el sistema. Asegurese de eliminarlos o asignarlos a otro role antes de intentar eliminar el role.';
    RESULTADO := 1;
END;
/

-->>>>>>>>>>> Paquete Productos<<<<<<<<<<<<<


-- Permite mostrar todos los productos
CREATE OR REPLACE PROCEDURE SP_OBTENER_PRODUCTOS(PRODUCTO OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN OPEN PRODUCTO FOR
SELECT *
FROM NEGOCIO.VW_PRODUCTOS;
RESULTADO := 0;
MENSAJE := 'Lista de productos de la base de datos.';
END;
/

-- Permite mostrar un producto en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_UN_PRODUCTO(IN_ID_PRODUCTO IN NUMBER, PRODUCTO OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN OPEN PRODUCTO FOR
SELECT * 
FROM NEGOCIO.TAB_PRODUCTOS
WHERE ID_PRODUCTO = IN_ID_PRODUCTO;
RESULTADO:= 0;
END;
/

--Este procedimiento ingresa un producto
CREATE OR REPLACE PROCEDURE SP_INSERTAR_PRODUCTO (IN_CODIGO IN VARCHAR2, IN_MARCA_ID IN NUMBER, IN_CATEGORIA_ID IN NUMBER, 
IN_NOMBRE IN VARCHAR2, IN_DETALLE IN VARCHAR2, IN_PRECIO IN NUMBER, IN_TAMANO IN VARCHAR2, IN_CANTIDAD IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
INSERT INTO NEGOCIO.TAB_PRODUCTOS (CODIGO, MARCA_ID, CATEGORIA_ID, NOMBRE, DETALLE, PRECIO, TAMANO,CANTIDAD) 
VALUES (IN_CODIGO, IN_MARCA_ID, IN_CATEGORIA_ID, IN_NOMBRE, IN_DETALLE, IN_PRECIO, IN_TAMANO,IN_CANTIDAD);
RESULTADO :=0;
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar el producto ya que existe otro con el mismo nombre en el sistema';
END;
/


--Este procedimiento permite modificar un producto del inventario
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PRODUCTO (IN_ID_PRODUCTO IN NUMBER, IN_CODIGO IN VARCHAR2, IN_MARCA_ID IN NUMBER, IN_CATEGORIA_ID IN NUMBER, 
IN_NOMBRE IN VARCHAR2, IN_DETALLE IN VARCHAR2, IN_PRECIO IN DECIMAL, IN_TAMANO IN VARCHAR2,  IN_CANTIDAD IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
UPDATE TAB_PRODUCTOS SET 
CODIGO = IN_CODIGO,
MARCA_ID = IN_MARCA_ID,
CATEGORIA_ID = IN_CATEGORIA_ID,
NOMBRE = IN_NOMBRE,
DETALLE = IN_DETALLE,
PRECIO = IN_PRECIO,
TAMANO = IN_TAMANO,
CANTIDAD = IN_CANTIDAD
WHERE ID_PRODUCTO = IN_ID_PRODUCTO;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar el producto ya que el nuevo nombre esta siendo utilizado por otro en el sistema';
    RESULTADO := 1;
END;
/

-- Elimina un producto en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PRODUCTO(IN_ID_PRODUCTO IN NUMBER , RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM NEGOCIO.TAB_PRODUCTOS WHERE IN_ID_PRODUCTO = ID_PRODUCTO;
RESULTADO:= 0;
END;
/

--Este procedimiento inserta una marca de productos
CREATE OR REPLACE PROCEDURE SP_INSERTAR_MARCA (IN_NOMBRE VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:=0;
INSERT INTO TAB_MARCAS (NOMBRE) 
VALUES (IN_NOMBRE);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar la marca ya que existe otra con el mismo nombre en el sistema';
END;
/

CREATE OR REPLACE PROCEDURE SP_OBTENER_MARCAS (TIPOS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN TIPOS FOR 
SELECT ID_MARCA, NOMBRE
FROM TAB_MARCAS;
RESULTADO := 0;
END;
/

--Este procedimiento devuelve una marca en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_UNA_MARCA (IN_ID_MARCA IN NUMBER, MARCA OUT VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
SELECT NOMBRE INTO MARCA
FROM NEGOCIO.TAB_MARCAS
WHERE ID_MARCA = IN_ID_MARCA;
END;
/

create or replace PROCEDURE SP_MODIFICAR_MARCA (IN_ID_MARCA IN NUMBER, IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE TAB_MARCAS
SET 
NOMBRE = IN_NOMBRE
WHERE ID_MARCA = IN_ID_MARCA;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar la marca ya que el nuevo nombre esta siendo utilizado por otra en el sistema';
    RESULTADO := 1;
END;
/

-- Elimina una marca en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_MARCA (IN_ID_MARCA IN NUMBER , RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
DELETE FROM TAB_MARCAS WHERE IN_ID_MARCA = ID_MARCA;
RESULTADO :=0;
MENSAJE := 'La marca fue eliminada satisfactoriamente';
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'Actualmente hay productos de dicha marca en el sistema. Asegurese de eliminarlos o asignarlos a otra marca antes de intentar eliminar la marca.';
    RESULTADO := 1;
END;
/

-->>>>>>>>>>> Paquete Categorias<<<<<<<<<<<<<
--Inserta una nueva categoria
CREATE OR REPLACE PROCEDURE SP_INSERTAR_CATEGORIA(IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
INSERT INTO TAB_CATEGORIAS(NOMBRE,CATEGORIA_MADRE_ID) VALUES (IN_NOMBRE, '');
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se puede agregar nombres ya en uso.';
END;
/

--Inserta una nueva subcategoria
CREATE OR REPLACE PROCEDURE SP_INSERTAR_SUBCATEGORIA (IN_NOMBRE IN VARCHAR2, IN_CATEGORIA_MADRE_ID IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
RESULTADO:= 0;
INSERT INTO TAB_CATEGORIAS(NOMBRE,CATEGORIA_MADRE_ID) VALUES (IN_NOMBRE,IN_CATEGORIA_MADRE_ID);
EXCEPTION
WHEN dup_val_on_index THEN
RESULTADO:= 1;
MENSAJE := 'No se pudo agregar la categoria ya que existe otra con el mismo nombre en el sitema';
END;
/

--Devolver categoria en base a un id
CREATE OR REPLACE PROCEDURE SP_OBTENER_UNA_CATEGORIA (V_ID_CAT IN NUMBER, CATEGORIA OUT SYS_REFCURSOR) AS
BEGIN OPEN CATEGORIA FOR 
SELECT *  FROM NEGOCIO.TAB_CATEGORIAS WHERE ID_CATEGORIA = V_ID_CAT;
END;
/

--Devolver todas las categorias principales
CREATE OR REPLACE PROCEDURE SP_OBTENER_CATEGORIAS_PRINCIPALES (CATS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN CATS FOR SELECT * FROM TAB_CATEGORIAS WHERE CATEGORIA_MADRE_ID IS NULL;
END;
/

--Devolver todas las subcategorias que pertenezcan a una categoria en especifico
CREATE OR REPLACE PROCEDURE SP_OBTENER_SUBCATEGORIAS_EN_CATEGORIA (SUB_CATS OUT SYS_REFCURSOR, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2)
AS
BEGIN
OPEN SUB_CATS FOR SELECT * FROM VW_CATEGORIAS  WHERE CATEGORIA_MADRE_ID IS NOT NULL;
RESULTADO:= 0;
END;
/

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PRINCIPALES (IN_ID_CATEGORIA IN NUMBER, IN_NOMBRE IN VARCHAR2, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS
BEGIN
UPDATE NEGOCIO.TAB_CATEGORIAS
SET 
NOMBRE = IN_NOMBRE
WHERE ID_CATEGORIA = IN_ID_CATEGORIA;
RESULTADO :=0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar la marca ya que el nuevo nombre esta siendo utilizado por otra en el sistema';
    RESULTADO := 1;
END;
/

--Este procedimiento modifica una categoria
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_CATEGORIA (IN_ID_CATEGORIA IN NUMBER, IN_NOMBRE IN VARCHAR2, IN_CATEGORIA_MADRE_ID IN NUMBER,
RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
BEGIN
UPDATE TAB_CATEGORIAS SET 
NOMBRE = IN_NOMBRE,
CATEGORIA_MADRE_ID = IN_CATEGORIA_MADRE_ID
WHERE ID_CATEGORIA = IN_ID_CATEGORIA;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    MENSAJE := 'No se pudo modificar la categoria ya que el nuevo nombre esta siendo utilizado por otra en el sistema';
    RESULTADO := 1;
END;
/

--Este procedimiento permite eliminar una categoria en especifico
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_CATEGORIA (IN_ID_CATEGORIA IN NUMBER, RESULTADO OUT NUMBER, MENSAJE OUT VARCHAR2) AS 
V_CATEGORIA_MADRE_CHECK VARCHAR2(50);
BEGIN
DELETE FROM TAB_CATEGORIAS WHERE IN_ID_CATEGORIA = ID_CATEGORIA;
RESULTADO := 0;
EXCEPTION
WHEN OTHERS THEN
    SELECT CATEGORIA_MADRE_ID INTO V_CATEGORIA_MADRE_CHECK FROM TAB_CATEGORIAS WHERE IN_ID_CATEGORIA = ID_CATEGORIA; 
    IF V_CATEGORIA_MADRE_CHECK IS NULL THEN 
    MENSAJE := 'La categoria no fue eliminada ya que hay subcategorias que dependen de ella';
    RESULTADO := 1;
    ELSE
    MENSAJE := 'La categoria no fue eliminada ya que hay productos que dependen de ella';
    RESULTADO := 1;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_BEFORE_INSERT_TAB_DETALLES_FACTURA 
BEFORE INSERT ON TAB_DETALLES_FACTURA
FOR EACH ROW
DECLARE
V_SUBTOTAL_SIN_IVA NUMBER(8,2);
V_SUBTOTAL NUMBER (8,2);
BEGIN
V_SUBTOTAL_SIN_IVA := :new.CANTIDAD * :new.PRECIO;
:new.TOTAL_SIN_IVA :=V_SUBTOTAL_SIN_IVA;
:new.SUBTOTAL := V_SUBTOTAL_SIN_IVA+ (V_SUBTOTAL_SIN_IVA * :new.IVA);
END;
/

--Inserts Facturacion
INSERT INTO TAB_TIPOS_VENTA(NOMBRE) VALUES ('Contado');--1
INSERT INTO TAB_TIPOS_VENTA(NOMBRE) VALUES ('Credito');--2

INSERT INTO TAB_MEDIOS_PAGO(NOMBRE) VALUES ('Tarjeta');--1
INSERT INTO TAB_MEDIOS_PAGO(NOMBRE) VALUES ('Efectivo');--2
INSERT INTO TAB_MEDIOS_PAGO(NOMBRE) VALUES ('Cheque');--3
INSERT INTO TAB_MEDIOS_PAGO(NOMBRE) VALUES ('Transferencia');--4
INSERT INTO TAB_MEDIOS_PAGO(NOMBRE) VALUES ('Sinpe');--5


INSERT INTO TAB_FACTURAS ( VENDEDOR_ID, CLIENTE_ID, TIPO_VENTA_ID, TOTAL_ENTREGA, TOTAL, MEDIO_PAGO_ID) VALUES (1, 3, 2, 6500, 101872, 1);
INSERT INTO TAB_FACTURAS ( VENDEDOR_ID, CLIENTE_ID, TIPO_VENTA_ID, TOTAL_ENTREGA, TOTAL, MEDIO_PAGO_ID) VALUES (1, 6, 1, 0, 55144 ,2);
INSERT INTO TAB_FACTURAS ( VENDEDOR_ID, CLIENTE_ID, TIPO_VENTA_ID, TOTAL_ENTREGA, TOTAL, MEDIO_PAGO_ID) VALUES (1, 4, 1, 7500, 97222, 1);

INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (1,1,'Camiseta tipo polo','S',1,23900,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (1,2,'Pantalon Levis','29',1,30500,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (1,3,'Johnnie Walker','750ml',2,15000,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (2,1,'Jeans Denim Stretch','36',1,24900,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (2,2,'Camiseta tipo polo','XL',1,23900,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (3,1,'Chaqueta impermeable','L',1,41900,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (3,2,'Camisa manga larga','M',1,25500,0.13);
INSERT INTO TAB_DETALLES_FACTURA (ID_FACTURA, ID_DETALLE, PRODUCTO, TAMANO, CANTIDAD, PRECIO, IVA) VALUES (3,3,'Tommy Hilfiger','29',1,12000,0.13);
/
-------------------------------------------------------------------------------------------------------------------
--GRANT EXECUTE ON NEGOCIO TO WEB_ACCESS;
begin
for x in ( SELECT DISTINCT OBJECT_NAME 
  FROM DBA_OBJECTS
 WHERE OBJECT_TYPE = 'TABLE'
   AND OWNER = 'NEGOCIO'
 )
loop

execute immediate 'grant select on ' || x.OBJECT_NAME ||
' to WEB_ACCESS';
end loop;
end;
/

begin
for x in ( SELECT DISTINCT OBJECT_NAME 
  FROM DBA_OBJECTS
 WHERE OBJECT_TYPE = 'PROCEDURE'
   AND OWNER = 'NEGOCIO'
 )
loop

execute immediate 'grant EXECUTE on ' || x.OBJECT_NAME ||
' to WEB_ACCESS';
end loop;
end;
/

begin
for x in ( SELECT DISTINCT OBJECT_NAME 
  FROM DBA_OBJECTS
 WHERE OBJECT_TYPE = 'PACKAGE'
   AND OWNER = 'NEGOCIO'
 )
loop

execute immediate 'grant EXECUTE on ' || x.OBJECT_NAME ||
' to WEB_ACCESS';
end loop;
end;
/


select * from TAB_FACTURAS;
SELECT * FROM TAB_DETALLES_FACTURA;